name: Configuration Validation

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  validate-makefile:
    name: Validate Makefile
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Cache make and system packages
      uses: actions/cache@v4
      with:
        path: |
          /var/cache/apt/archives
          /usr/bin/make
          /usr/share/man/man1/make.1.gz
        key: ${{ runner.os }}-make-system-${{ hashFiles('Makefile', 'makefiles/*.mk') }}
        restore-keys: |
          ${{ runner.os }}-make-system-
          ${{ runner.os }}-apt-

    - name: Install make (if not cached)
      run: |
        if ! command -v make &> /dev/null; then
          echo "üì¶ Installing make..."
          sudo apt-get update
          sudo apt-get install -y make
        else
          echo "‚úÖ Make already available (cached)"
        fi

    - name: Verify Makefile syntax
      run: |
        echo "üîç Checking Makefile syntax..."
        make --dry-run --just-print help > /dev/null
        echo "‚úÖ Makefile syntax is valid"

    - name: Test make targets exist
      run: |
        echo "üéØ Verifying essential make targets exist..."
        make --dry-run help
        make --dry-run validate-config
        make --dry-run check-deps
        make --dry-run dry-run
        echo "‚úÖ All essential targets are available"

  validate-fish-config:
    name: Validate Fish Shell Configuration
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Cache Fish shell and dependencies
      uses: actions/cache@v4
      with:
        path: |
          /var/cache/apt/archives
          ~/.cache/fish
          /usr/bin/fish
          /usr/share/fish
        key: ${{ runner.os }}-fish-${{ hashFiles('fish/**/*.fish') }}
        restore-keys: |
          ${{ runner.os }}-fish-

    - name: Install Fish shell (if not cached)
      run: |
        if ! command -v fish &> /dev/null; then
          echo "üêü Installing Fish shell..."
          sudo apt-get update
          sudo apt-get install -y fish
        else
          echo "‚úÖ Fish shell already available (cached)"
        fi

    - name: Validate Fish configuration syntax
      run: |
        echo "üêü Validating Fish configuration syntax..."
        if [ -f "fish/config.fish" ]; then
          fish -n fish/config.fish
          echo "ÔøΩÔøΩ fish/config.fish syntax is valid"
        else
          echo "‚ùå fish/config.fish not found"
          exit 1
        fi

    - name: Validate Fish function files
      run: |
        echo "üîç Checking Fish function files..."
        if [ -d "fish/functions" ]; then
          for func_file in fish/functions/*.fish; do
            if [ -f "$func_file" ]; then
              echo "  Checking $(basename "$func_file")..."
              fish -n "$func_file"
            fi
          done
          echo "‚úÖ All Fish function files are valid"
        else
          echo "‚ÑπÔ∏è No Fish functions directory found"
        fi

    - name: Validate Fish completion files
      run: |
        echo "üîç Checking Fish completion files..."
        if [ -d "fish/completions" ]; then
          for comp_file in fish/completions/*.fish; do
            if [ -f "$comp_file" ]; then
              echo "  Checking $(basename "$comp_file")..."
              fish -n "$comp_file"
            fi
          done
          echo "‚úÖ All Fish completion files are valid"
        else
          echo "‚ÑπÔ∏è No Fish completions directory found"
        fi

  validate-configs:
    name: Validate Configuration Files
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Cache validation tools and binaries
      uses: actions/cache@v4
      with:
        path: |
          /var/cache/apt/archives
          ~/.cache/pip
          /usr/bin/git
          /usr/bin/python3
          /usr/bin/lua5.3
          /usr/bin/jq
          /usr/share/man/man1/git.1.gz
          /usr/share/man/man1/python3.1.gz
          /usr/share/man/man1/lua5.3.1.gz
          /usr/share/man/man1/jq.1.gz
        key: ${{ runner.os }}-validation-tools-${{ hashFiles('**/*.json', '**/*.lua', 'gitconfig/.gitconfig') }}
        restore-keys: |
          ${{ runner.os }}-validation-tools-

    - name: Install dependencies (if not cached)
      run: |
        MISSING_TOOLS=()
        
        command -v git &> /dev/null || MISSING_TOOLS+=("git")
        command -v python3 &> /dev/null || MISSING_TOOLS+=("python3")
        command -v lua5.3 &> /dev/null || MISSING_TOOLS+=("lua5.3")
        command -v jq &> /dev/null || MISSING_TOOLS+=("jq")
        
        if [ ${#MISSING_TOOLS[@]} -eq 0 ]; then
          echo "‚úÖ All validation tools already available (cached)"
        else
          echo "üì¶ Installing missing tools: ${MISSING_TOOLS[*]}"
          sudo apt-get update
          sudo apt-get install -y "${MISSING_TOOLS[@]}"
        fi

    - name: Validate Git configuration
      run: |
        echo "üìù Validating Git configuration..."
        if [ -f "gitconfig/.gitconfig" ]; then
          git config --file="gitconfig/.gitconfig" --list > /dev/null
          echo "‚úÖ .gitconfig syntax is valid"
        else
          echo "‚ö†Ô∏è .gitconfig not found"
        fi

    - name: Validate JSON configurations
      run: |
        echo "üîç Validating JSON configuration files..."
        
        # Validate Karabiner config
        if [ -f "karabiner/karabiner.json" ]; then
          echo "  Checking karabiner.json..."
          python3 -m json.tool karabiner/karabiner.json > /dev/null
          echo "  ‚úÖ Karabiner config JSON is valid"
        else
          echo "  ‚ÑπÔ∏è Karabiner config not found"
        fi
        
        # Validate other JSON files
        find . -name "*.json" -not -path "./.git/*" | while read -r json_file; do
          echo "  Checking $json_file..."
          python3 -m json.tool "$json_file" > /dev/null
        done
        echo "‚úÖ All JSON files are valid"

    - name: Validate Lua configurations
      run: |
        echo "üåô Validating Lua configuration files..."
        if [ -f "hammerspoon/init.lua" ]; then
          echo "  Checking hammerspoon/init.lua..."
          lua5.3 -e "dofile('hammerspoon/init.lua')" 2>/dev/null || echo "  ‚ö†Ô∏è Hammerspoon config may have runtime dependencies"
          # Just check syntax
          lua5.3 -l hammerspoon/init.lua -e "" 2>/dev/null || echo "  ‚ÑπÔ∏è Syntax check skipped (may have external dependencies)"
          echo "  ‚úÖ Hammerspoon config checked"
        else
          echo "  ‚ÑπÔ∏è Hammerspoon config not found"
        fi
        
        # Check other Lua files
        find . -name "*.lua" -not -path "./.git/*" | while read -r lua_file; do
          echo "  Checking syntax for $lua_file..."
          lua5.3 -e "assert(loadfile('$lua_file'))" || echo "  ‚ö†Ô∏è $lua_file has syntax issues or dependencies"
        done

  run-make-validation:
    name: Run Make Validation Targets
    runs-on: ubuntu-latest
    needs: [validate-makefile]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Cache make validation dependencies and binaries
      uses: actions/cache@v4
      with:
        path: |
          /var/cache/apt/archives
          ~/.cache/fish
          ~/.cache/pip
          /usr/bin/make
          /usr/bin/git
          /usr/bin/fish
          /usr/bin/python3
          /usr/bin/lua5.3
          /usr/share/fish
        key: ${{ runner.os }}-make-validation-${{ hashFiles('Makefile', 'makefiles/*.mk') }}
        restore-keys: |
          ${{ runner.os }}-make-validation-

    - name: Install dependencies (if not cached)
      run: |
        MISSING_TOOLS=()
        
        command -v make &> /dev/null || MISSING_TOOLS+=("make")
        command -v git &> /dev/null || MISSING_TOOLS+=("git")
        command -v fish &> /dev/null || MISSING_TOOLS+=("fish")
        command -v python3 &> /dev/null || MISSING_TOOLS+=("python3")
        command -v lua5.3 &> /dev/null || MISSING_TOOLS+=("lua5.3")
        
        if [ ${#MISSING_TOOLS[@]} -eq 0 ]; then
          echo "‚úÖ All tools already available (cached)"
        else
          echo "üì¶ Installing missing tools: ${MISSING_TOOLS[*]}"
          sudo apt-get update
          sudo apt-get install -y "${MISSING_TOOLS[@]}"
        fi

    - name: Run make check-deps
      run: |
        echo "üîç Running make check-deps..."
        make check-deps || echo "‚ö†Ô∏è Some dependencies missing (expected in CI)"

    - name: Run make dry-run
      run: |
        echo "üéØ Running make dry-run..."
        make dry-run

    - name: Run make validate-config
      run: |
        echo "‚úÖ Running make validate-config..."
        make validate-config

  test-brewfile:
    name: Validate Brewfile
    runs-on: macos-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Cache Homebrew
      uses: actions/cache@v4
      with:
        path: |
          ~/Library/Caches/Homebrew
          /usr/local/Homebrew
          /opt/homebrew
        key: ${{ runner.os }}-homebrew-${{ hashFiles('brew/Brewfile') }}
        restore-keys: |
          ${{ runner.os }}-homebrew-

    - name: Validate Brewfile syntax
      run: |
        echo "üç∫ Validating Brewfile..."
        if [ -f "brew/Brewfile" ]; then
          # Install Homebrew if not present
          if ! command -v brew &> /dev/null; then
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          fi
          
          # Update Homebrew
          brew update
          
          # Validate Brewfile syntax
          brew bundle check --file=brew/Brewfile --verbose || echo "‚ö†Ô∏è Some packages in Brewfile are not installed (expected)"
          echo "‚úÖ Brewfile syntax is valid"
        else
          echo "‚ùå brew/Brewfile not found"
          exit 1
        fi

  check-security:
    name: Security and Best Practices Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Cache security scanning tools and binaries
      uses: actions/cache@v4
      with:
        path: |
          /var/cache/apt/archives
          ~/.cache/shellcheck
          /usr/bin/shellcheck
          /usr/bin/fish
          /usr/share/fish
          /usr/share/man/man1/shellcheck.1.gz
        key: ${{ runner.os }}-security-tools-${{ hashFiles('**/*.sh', '**/*.fish') }}
        restore-keys: |
          ${{ runner.os }}-security-tools-

    - name: Install security tools (if not cached)
      run: |
        MISSING_TOOLS=()
        
        command -v shellcheck &> /dev/null || MISSING_TOOLS+=("shellcheck")
        command -v fish &> /dev/null || MISSING_TOOLS+=("fish")
        
        if [ ${#MISSING_TOOLS[@]} -eq 0 ]; then
          echo "‚úÖ All security tools already available (cached)"
        else
          echo "üì¶ Installing missing security tools: ${MISSING_TOOLS[*]}"
          sudo apt-get update
          sudo apt-get install -y "${MISSING_TOOLS[@]}"
        fi

    - name: Check for sensitive files
      run: |
        echo "üîí Checking for sensitive files..."
        
        # Check for common sensitive patterns
        if grep -r "password\|secret\|key\|token" --include="*.fish" --include="*.env" --include="*.sh" . 2>/dev/null; then
          echo "‚ö†Ô∏è Found potential sensitive data patterns - please review"
        else
          echo "‚úÖ No obvious sensitive data patterns found"
        fi
        
        # Check file permissions patterns in config
        echo "üìã Checking for appropriate file permission references..."
        if grep -r "chmod.*600\|chmod.*644" . 2>/dev/null; then
          echo "‚úÖ Found secure file permission patterns"
        fi

    - name: Validate shell script syntax with ShellCheck
      run: |
        echo "üìú Validating shell scripts with ShellCheck..."
        find . -name "*.sh" -not -path "./.git/*" | while read -r script; do
          echo "  Checking syntax for $script..."
          bash -n "$script"
          echo "  Running ShellCheck on $script..."
          shellcheck "$script" || echo "  ÔøΩÔøΩÔøΩÔ∏è ShellCheck found issues in $script"
        done
        echo "‚úÖ All shell scripts checked"

    - name: Validate Fish scripts
      run: |
        echo "üêü Installing Fish for script validation..."
        sudo apt-get install -y fish
        
        echo "üîç Validating Fish scripts..."
        find . -name "*.fish" -not -path "./.git/*" | while read -r script; do
          echo "  Checking syntax for $script..."
          fish -n "$script" || echo "  ‚ö†Ô∏è Fish syntax issues in $script"
        done
        echo "‚úÖ All Fish scripts checked"
